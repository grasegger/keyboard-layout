/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* UNIVERSAL GERMAN KEY CODES */
#define DE_Z    Y             // Z
#define DE_Y    Z             // Y
#define DE_SS   MINUS         // ß


/* MAC GERMAN KEYBOARD CODES */
#define MAC_AT LA(L)           // @
#define MAC_EURO LA(E)         // €
#define MAC_TILD LA(N)         // ~
#define MAC_BSLS LS(LA(NUMBER_7)) // (backslash)
#define MAC_LBRC LA(NUMBER_5)     // [
#define MAC_RBRC LA(NUMBER_6)     // ]
#define MAC_PIPE LA(NUMBER_7)     // |
#define MAC_LCBR LA(NUMBER_8)     // {
#define MAC_RCBR LA(NUMBER_9)     // }

/* DIN GERMAN KEYBOARD CODES */
#define DE_CIRC GRAVE // ^ (dead)
#define DE_ACUT EQUAL // ´ (dead)
#define DE_UNDS LS(DE_MINS) // _
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #
#define DE_LABK NON_US_BACKSLASH // <
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_MINS SLASH            // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(DE_PLUS) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(COMMA) // ;
#define DE_COLN LS(PERIOD)  // :

#define DE_AT RA(Q)           // @
#define DE_EURO RA(E)         // €
#define DE_TILD RA(DE_PLUS)         // ~
#define DE_BSLS RA(DE_SS) // (backslash)
#define DE_LBRC RA(NUMBER_8)     // [
#define DE_RBRC RA(NUMBER_9)     // ]
#define DE_PIPE RA(DE_LABK)     // |
#define DE_LCBR RA(NUMBER_7)     // {
#define DE_RCBR RA(NUMBER_0)     // }


#define _____ &none

#define ALP 1
#define PC  0
#define SYM 3
#define DSM 2
#define FUN 4
#define NNM 5

#define DE_UE DE_UDIA
#define DE_AE DE_ADIA
#define DE_OE DE_ODIA

#define HYP LG(LC(LS(LALT)))
#define MEH LC(LS(LALT))
#define DUH LC(LALT)
#define UGH LG(LALT)

&caps_word {
    continue-list = <DE_UNDS DE_MINS BACKSPACE DELETE>;
};

&mt {
  quick-tap-ms = <125>;
  global-quick-tap;
  flavor = "tap-preferred";
  tapping-term-ms = <250>;
};

&lt {
  quick-tap-ms = <125>;
  global-quick-tap;
};

&sk {
    quick-release;
};

&sl {
    quick-release;
};

/{
    combos {
        compatible = "zmk,combos";

        combo_bsp {
            timeout-ms = <10>;
            key-positions = <7 8>;
            bindings = <&kp BACKSPACE>;
            layers = <0 1>;
        };

        combo_del {
            timeout-ms = <10>;
            key-positions = <27 28>;
            bindings = <&kp DELETE>;
            layers = <0 1>;
        };

        combo_enter {
            timeout-ms = <10>;
            key-positions = <17 18>;
            bindings = <&kp ENTER>;
            layers = <0 1>;
        };

        combo_esc {
            timeout-ms = <10>;
            key-positions = <1 2>;
            bindings = <&kp ESCAPE>;
            layers = <0 1>;
        };

        combo_tab {
            timeout-ms = <10>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
            layers = <0 1>;
        };

        combo_caps {
            timeout-ms = <10>;
            key-positions = <21 22>;
            bindings = <&caps_word>;
            layers = <0 1>;
        };


        shift_sk_l {
            timeout-ms = <10>;
            key-positions = <11 12 13>;
            bindings = <&sk LSHFT>;
            layers = <0 1>;
        };

        shift_sk_r {
            timeout-ms = <10>;
            key-positions = <16 17 18>;
            bindings = <&sk LSHFT>;
            layers = <0 1>;
        };

        ae {
            timeout-ms = <10>;
            key-positions = <2 3>;
            bindings = <&kp DE_AE>;
            layers = <0 1>;
        };

        p {
            timeout-ms = <10>;
            key-positions = <12 13>;
            bindings = <&kp DE_OE>;
            layers = <0 1>;
        };

        oe {
            timeout-ms = <10>;
            key-positions = <22 23>;
            bindings = <&kp DE_UE>;
            layers = <0 1>;
        };

        m {
            timeout-ms = <10>;
            key-positions = <16 17>;
            bindings = <&kp Q>;
            layers = <0 1>;
        };   
        
        w {
            timeout-ms = <10>;
            key-positions = <26 27>;
            bindings = <&kp J>;
            layers = <0 1>;
        };


        ue {
            timeout-ms = <10>;
            key-positions = <6 7>;
            bindings = <&kp DE_SS>;
            layers = <0 1>;
        };

        rbrc {
            timeout-ms = <10>;
            key-positions = <2 3>;
            bindings = <&kp DE_RBRC>;
            layers = <2>;
        };

        rbrc_mac {
            timeout-ms = <10>;
            key-positions = <2 3>;
            bindings = <&kp MAC_RBRC>;
            layers = <3>;
        };

        rcbr {
            timeout-ms = <10>;
            key-positions = <12 13>;
            bindings = <&kp DE_RCBR>;
            layers = <2>;
        };

        rcbr_mac {
            timeout-ms = <10>;
            key-positions = <12 13>;
            bindings = <&kp MAC_RCBR>;
            layers = <3>;
        };

        rabk{
            timeout-ms = <10>;
            key-positions = <6 7>;
            bindings = <&kp DE_RABK>;
            layers = <2 3>;
        };

        rprn {
            timeout-ms = <10>;
            key-positions = <16 17>;
            bindings = <&kp DE_RPRN>;
            layers = <2 3>;
        };

        at {
            timeout-ms = <10>;
            key-positions = <11 12>;
            bindings = <&kp DE_AT>;
            layers = <2>;
        };

        at_mac {
            timeout-ms = <10>;
            key-positions = <11 12>;
            bindings = <&kp MAC_AT>;
            layers = <2>;
        };

        deg {
            timeout-ms = <10>;
            key-positions = <1 2>;
            bindings = <&kp DE_DEG>;
            layers = <2 3>;
        };

        circ {
            timeout-ms = <10>;
            key-positions = <7 8>;
            bindings = <&kp DE_CIRC>;
            layers = <2 3>;
        };

        dlr {
            timeout-ms = <10>;
            key-positions = <17 18>;
            bindings = <&kp DE_DLR>;
            layers = <2 3>;
        };


        num_times {
            timeout-ms = <10>;
            key-positions = <2 3>;
            bindings = <&kp LS(RIGHT_BRACKET)>;
            layers = <5>;
        };

        num_div {
            timeout-ms = <10>;
            key-positions = <1 2>;
            bindings = <&kp LS(NUMBER_7)>;
            layers = <5>;
        };

        num_plus {
            timeout-ms = <10>;
            key-positions = <12 13>;
            bindings = <&kp RIGHT_BRACKET>;
            layers = <5>;
        };

        num_mins {
            timeout-ms = <10>;
            key-positions = <11 12>;
            bindings = <&kp SLASH>;
            layers = <5>;
        };

        num_ent {
            timeout-ms = <10>;
            key-positions = <22 23>;
            bindings = <&kp ENTER>;
            layers = <5>;
        };

        num_back {
            timeout-ms = <10>;
            key-positions = <21 22>;
            bindings = <&kp BACKSPACE>;
            layers = <5>;
        };
    };


  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp W      &kp L         &lt FUN U     &kp A       _____ _____ &kp B       &lt FUN D    &kp G        &kp F
        &mt LALT C &mt LSHIFT R  &lt NNM I     &mt LCTRL E _____ _____ &mt LCTRL N &lt NNM T    &mt LSHIFT S &mt LALT H
        &mt HYP V  &mt MEH X     &mt DUH P     &mt LGUI O  _____ _____ &mt LGUI M  &mt DUH DE_Z &mt MEH K    &mt HYP DE_Y
                                 _____         &kp SPACE   _____ _____ &sl DSM     _____
      >;
    };

    mac_base {
      bindings = <
        &trans &trans &trans        &trans      &trans &trans &trans      &trans       &trans &trans
        &trans &trans &trans        &mt LGUI E  &trans &trans &mt LGUI N  &mt LALT T   &trans &trans
        &trans &trans &mt UGH W     &mt LCTRL O &trans &trans &mt LCTRL F &mt UGH DE_Z &trans &trans
                      &trans        &trans      &trans &trans &sl SYM     &trans
      >;
    };

    pc_sym {
      bindings = <
        &kp DE_EURO  &kp DE_UNDS &kp DE_LBRC &kp DE_PLUS _____ _____ &kp DE_AMPR &kp DE_LABK &kp DE_EQL  &kp DE_PERC
        &kp DE_BSLS  &kp DE_SLSH &kp DE_LCBR &kp DE_ASTR _____ _____ &kp DE_QUES &kp DE_LPRN &kp DE_MINS &kp DE_COLN
        &kp DE_HASH  &kp DE_GRV  &kp DE_PIPE &kp DE_TILD _____ _____ &kp DE_EXLM &kp DE_DQUO &kp DE_QUOT &kp DE_SCLN
                                 _____       &kp PERIOD  _____ _____ &kp COMMA   _____
      >;
    };

    mac_sym {
      bindings = <
        &kp MAC_EURO &kp DE_UNDS &kp MAC_LBRC &kp DE_PLUS  _____ _____ &kp DE_AMPR &kp DE_LABK &kp DE_EQL  &kp DE_PERC
        &kp MAC_BSLS &kp DE_SLSH &kp MAC_LCBR &kp DE_ASTR  _____ _____ &kp DE_QUES &kp DE_LPRN &kp DE_MINS &kp DE_COLN
        &kp DE_HASH  &kp DE_GRV  &kp MAC_PIPE &kp MAC_TILD _____ _____ &kp DE_EXLM &kp DE_DQUO &kp DE_QUOT &kp DE_SCLN
                                 _____        &kp PERIOD   _____ _____ &kp COMMA   _____
      >;
    };



    fun {
      bindings = <
        &kp F12 &kp F7 &kp F8 &kp F9      _____ _____ &kp C_VOL_UP &kp C_MUTE       &kp C_VOL_DN &to ALP
        &kp F11 &kp F4 &kp F5 &kp F6      _____ _____ &kp C_PREV   &kp C_PLAY_PAUSE &kp C_NEXT   &to PC
        &kp F10 &kp F1 &kp F2 &kp F3      _____ _____ &bt BT_SEL 1 &bt BT_NXT       &out OUT_TOG &bt BT_CLR
                       _____  &bootloader _____ _____ &bootloader  _____
      
      >;
    };

    num_new {
      bindings = <
        &kp DOT    &kp N7 &kp N8 &kp N9 _____ _____ &kp LC(LEFT) &kp LC(DOWN) &kp LC(UP) &kp LC(RIGHT)
        &kp COMMA  &kp N4 &kp N5 &kp N6 _____ _____ &kp LEFT     &kp DOWN     &kp UP     &kp RIGHT
        &kp ENTER  &kp N1 &kp N2 &kp N3 _____ _____ &kp HOME     &kp PG_DN    &kp PG_UP  &kp END
                           _____ &kp N0 _____ _____ &kp SPACE    _____
      >;
    };
  };
};