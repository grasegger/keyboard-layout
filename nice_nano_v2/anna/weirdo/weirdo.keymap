/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

/* GERMAN KEY CODES */
#define DE_CIRC GRAVE // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL // ´ (dead)
#define DE_Q    Q            // Q
#define DE_W    W            // W
#define DE_E    E            // E
#define DE_R    R            // R
#define DE_T    T            // T
#define DE_Z    Y            // Z
#define DE_U    U            // U
#define DE_I    I            // I
#define DE_O    O            // O
#define DE_P    P            // P
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +
#define DE_A    A            // A
#define DE_S    S            // S
#define DE_D    D            // D
#define DE_F    F            // F
#define DE_G    G            // G
#define DE_H    H            // H
#define DE_J    J            // J
#define DE_K    K            // K
#define DE_L    L            // L
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #
#define DE_LABK NON_US_BACKSLASH // <
#define DE_Y    Z                // Y
#define DE_X    X                // X
#define DE_C    C                // C
#define DE_V    V                // V
#define DE_B    B                // B
#define DE_N    N                // N
#define DE_M    M                // M
#define DE_COMM COMMA            // ,
#define DE_DOT  PERIOD           // .
#define DE_MINS SLASH            // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(DE_PLUS) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(DE_COMM) // ;
#define DE_COLN LS(DE_DOT)  // :
#define DE_UNDS LS(DE_MINS) // _
#define DE_LBRC LA(NUMBER_5)    // [
#define DE_RBRC LA(NUMBER_6)    // ]
#define DE_PIPE LA(NUMBER_7)    // |
#define DE_LCBR LA(NUMBER_8)    // {
#define DE_RCBR LA(NUMBER_9)    // }
#define DE_AT LA(DE_L)    // @
#define DE_EURO LA(DE_E)    // €
#define DE_TILD LA(DE_N)    // ~
#define DE_BSLS LS(LA(NUMBER_7))    // (backslash)
                                     
#define HOLD_TAP_TIME 200
#define _____ &none
#define HYPER LC(LG(LS(LALT)))

&mt {
  tapping-term-ms = <HOLD_TAP_TIME>;
  flavor = "tap-preferred";
  quick_tap_ms = <50>;
};

&lt {
  tapping-term-ms = <HOLD_TAP_TIME>;
  quick_tap_ms = <0>;
  flavor = "tap-preferred";
};

&sk {
  quick-release;
};

#define AL1 0
#define AL2 1
#define NUM 2
#define SY1 3
#define SY2 4

/ {
  behaviors {
    hl: hl {
      compatible = "zmk,behavior-hold-tap";
      label = "hl";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <HOLD_TAP_TIME>;
      quick-tap-ms = <50>;
      bindings = <&sl>, <&kp>;
    };

   	shift_al2: shift_al2 {
			compatible = "zmk,behavior-macro";
			label = "shift_al2";
			#binding-cells = <0>;
			bindings = <&sk LSHFT>, <&sl AL2>;
		};
  };

  keymap {
    compatible = "zmk,keymap";

    // This is a sample keymap intended to be replaced with your own
    alpha_1 {
      bindings = <
        &kp DE_UDIA   &kp DE_L      &kp DE_U        &kp DE_A      &kp C_VOL_UP        &kp LC(TAB)         &kp DE_B      &kp DE_D        &kp DE_G      &kp DE_SS
        &mt LALT DE_C &hl SY1 DE_R  &mt LCTRL DE_I  &mt LGUI DE_E &mt HYPER LG(DE_T)  &mt HYPER LG(DE_W)  &mt LGUI DE_N &mt LCTRL DE_T  &hl SY2 DE_S  &mt LALT DE_H
        &kp LEFT      &kp DOWN      &kp UP          &kp RIGHT     &kp C_VOL_DN        &kp LS(LC(TAB))     &kp BACKSPACE &kp TAB         &kp ENTER     &kp ESCAPE  
        &kp HOME      &kp END       &kp LG(SPACE)   &sk LSHFT     &kp SPACE           &sl AL2             &shift_al2    &kp LC(SPACE)   &kp PG_UP     &kp PG_DN
      >;
    };

    alpha_2 {
      bindings = <
        &kp DE_ADIA   &kp DE_DOT        &kp DE_COMM     &kp DE_J      &kp C_BRI_UP        &kp LG(DE_N)        &kp DE_W      &kp DE_Y        &kp DE_Q      &kp DE_ODIA
        &mt LALT DE_V &hl SY1 DE_X      &mt LCTRL DE_Z  &mt LGUI DE_O &mt HYPER LC(LEFT)  &mt HYPER LC(RIGHT) &mt LGUI DE_M &mt LCTRL DE_P  &hl SY2 DE_F  &mt LALT DE_K
        _____         _____             _____           _____         &kp C_BRI_DEC       &caps_word          &to NUM       _____           _____         _____   
        _____         &kp C_PLAY_PAUSE  &kp C_MUTE      &sk LSHFT     &kp SPACE           &to AL1             &sk LSHFT     &kp C_PREV      &kp C_NEXT    _____
      >;
    };

    num {
      bindings = <
        &kp F7        &kp F8          &kp F9        &kp F11       _____     &kp KP_EQUAL  &kp N7      &kp N8        &kp N9        &kp DE_DOT 
        &mt LALT F4   &mt LSHFT F5    &mt LCTRL F6  &mt LGUI F10  _____     &kp ENTER     &mt LGUI N4 &mt LCTRL N5  &mt LSHFT N6  &mt LALT N0 
        &kp F1        &kp F2          &kp F3        &kp F12       _____     &kp BACKSPACE &kp N1      &kp N2        &kp N3        &kp DE_COMM   
        &kp KP_DIVIDE &kp KP_MULTIPLY &kp KP_MINUS  &kp KP_PLUS   &kp SPACE &to AL1       _____       _____         _____         _____ 
      >;
    };

    sym_one {
      bindings = <
        _____       &kp DE_SCLN &kp DE_DQUO &kp DE_QUOT _____       _____        &kp DE_EXLM &kp DE_QUES &kp DE_COLN _____
        &kp DE_LABK &kp DE_LBRC &kp DE_LCBR &kp DE_LPRN _____       _____        &kp DE_RPRN &kp DE_RCBR &kp DE_RBRC &kp DE_RABK       
        _____       _____       _____       _____       _____       _____        _____       _____       _____       _____         
        _____       _____       _____       _____       &kp DE_DLR  &kp DE_MINS  _____       _____       _____       _____ 
      >;
    };

    sym_two {
      bindings = <
        _____       &kp DE_TILD &kp DE_PIPE &kp DE_HASH _____       _____         &kp DE_ACUT &kp DE_DEG  &kp DE_CIRC _____
        &kp DE_EURO &kp DE_BSLS &kp DE_SLSH &kp DE_ASTR _____       _____         &kp DE_PERC &kp DE_AMPR &kp DE_EQL  &kp DE_GRV
        _____       _____       _____       _____       _____       _____         _____       _____       _____       _____
        _____       _____       _____       _____       &kp DE_UNDS  &kp DE_PLUS  _____       _____       _____       _____
      >;
    };

  };
};