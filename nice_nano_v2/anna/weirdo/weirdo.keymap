/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

/* GERMAN KEY CODES */
#define DE_CIRC GRAVE // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL // ´ (dead)
#define DE_Q    Q            // Q
#define DE_W    W            // W
#define DE_E    E            // E
#define DE_R    R            // R
#define DE_T    T            // T
#define DE_Z    Y            // Z
#define DE_U    U            // U
#define DE_I    I            // I
#define DE_O    O            // O
#define DE_P    P            // P
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +
#define DE_A    A            // A
#define DE_S    S            // S
#define DE_D    D            // D
#define DE_F    F            // F
#define DE_G    G            // G
#define DE_H    H            // H
#define DE_J    J            // J
#define DE_K    K            // K
#define DE_L    L            // L
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #
#define DE_LABK NON_US_BACKSLASH // <
#define DE_Y    Z                // Y
#define DE_X    X                // X
#define DE_C    C                // C
#define DE_V    V                // V
#define DE_B    B                // B
#define DE_N    N                // N
#define DE_M    M                // M
#define DE_COMM COMMA            // ,
#define DE_DOT  PERIOD           // .
#define DE_MINS SLASH            // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(DE_PLUS) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(DE_COMM) // ;
#define DE_COLN LS(DE_DOT)  // :
#define DE_UNDS LS(DE_MINS) // _
#define DE_LBRC LA(NUMBER_5)    // [
#define DE_RBRC LA(NUMBER_6)    // ]
#define DE_PIPE LA(NUMBER_7)    // |
#define DE_LCBR LA(NUMBER_8)    // {
#define DE_RCBR LA(NUMBER_9)    // }
#define DE_AT LA(DE_L)    // @
#define DE_EURO LA(DE_E)    // €
#define DE_TILD LA(DE_N)    // ~
#define DE_BSLS LS(LA(NUMBER_7))    // (backslash)
                                     
#define HOLD_TAP_TIME 200
#define _____ &none
#define HYPER LC(LG(LS(LALT)))

&mt {
  tapping-term-ms = <HOLD_TAP_TIME>;
  flavor = "tap-preferred";
  quick_tap_ms = <50>;
};

&lt {
  tapping-term-ms = <HOLD_TAP_TIME>;
  quick_tap_ms = <0>;
  flavor = "tap-preferred";
};

&sk {
  quick-release;
};

#define AL1 0
#define AL2 1
#define NUM 2

/ {
  behaviors {
    hl: hl {
      compatible = "zmk,behavior-hold-tap";
      label = "hl";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <HOLD_TAP_TIME>;
      quick-tap-ms = <50>;
      bindings = <&sl>, <&kp>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    // This is a sample keymap intended to be replaced with your own
    alpha_1 {
      bindings = <
        &kp DE_UDIA   &kp DE_L      &kp DE_U        &kp DE_A      &kp C_VOL_UP        &kp LCTRL(TAB)      &kp DE_B      &kp DE_D        &kp DE_G      &kp DE_SS
        &mt LALT DE_C &hl SY1 DE_R  &mt LCTRL DE_I  &mt LGUI DE_E &mt HYPER LG(DE_T)  &mt HYPER LG(DE_W)  &mt LGUI DE_N &mt LCTRL DE_T  &hl SY2 DE_S  &mt LALT DE_H
        &kp LEFT      &kp DOWN      &kp UP          &kp RIGHT     &kp C_VOL_DN        &kp LS(LCTRL(TAB))  &kp BACKSPACE &kp TAB         &kp ENTER     &kp ESCAPE  
        &to 0         &to 0         &kp LG(SPACE)   &sk LSHFT     &kp SPACE           &sl AL2             &sk LSHFT     &kp LC(SPACE)  &to 0         &to 0
      >;
    };

    alpha_2 {
      bindings = <
        &kp DE_ADIA   &kp DE_DOT    &kp DE_COMM     &kp DE_J      &kp C_BRI_UP      &kp LG(DE_N)            &kp DE_W      &kp DE_Y        &kp DE_Q      &kp DE_ODIA
        &mt LALT DE_V &hl SY1 DE_X  &mt LCTRL DE_Z  &mt LGUI DE_O &mt HYPER C_MUTE  &mt HYPER C_PLAY_PAUSE  &mt LGUI DE_M &mt LCTRL DE_P  &hl SY2 DE_F  &mt LALT DE_K
        &kp HOME      &kp PG_DN     &kp PG_UP       &kp END       &kp C_BRI_DEC     &caps_word              &to NUM       _____           _____         _____   
        &to 0         &to 0         &kp LC(LEFT)    &sk LSHFT     &kp SPACE         &to AL1                 &sk LSHFT     &kp LC(RIGHT)   &to 0         &to 0
      >;
    };

    num {
      bindings = <
        _____         _____             _____         _____       _____             _____                   &kp N7         &kp N8             &kp N9         _____ 
        _____         _____             _____         _____       _____             _____                   &kp N4         &kp N5             &kp N6         &kp N0 
        _____         _____             _____         _____       _____             _____                   &kp N1         &kp N2             &kp N3         _____   
        _____         _____             _____         _____       _____             &to AL1                 _____         _____             _____         _____ 
      >;
    };

  };
};