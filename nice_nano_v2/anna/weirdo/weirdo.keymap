/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/* GERMAN KEY CODES */
#define DE_CIRC GRAVE // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL // ´ (dead)
#define DE_Q    Q            // Q
#define DE_W    W            // W
#define DE_E    E            // E
#define DE_R    R            // R
#define DE_T    T            // T
#define DE_Z    Y            // Z
#define DE_U    U            // U
#define DE_I    I            // I
#define DE_O    O            // O
#define DE_P    P            // P
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +
#define DE_A    A            // A
#define DE_S    S            // S
#define DE_D    D            // D
#define DE_F    F            // F
#define DE_G    G            // G
#define DE_H    H            // H
#define DE_J    J            // J
#define DE_K    K            // K
#define DE_L    L            // L
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #
#define DE_LABK NON_US_BACKSLASH // <
#define DE_Y    Z                // Y
#define DE_X    X                // X
#define DE_C    C                // C
#define DE_V    V                // V
#define DE_B    B                // B
#define DE_N    N                // N
#define DE_M    M                // M
#define DE_COMM COMMA            // ,
#define DE_DOT  PERIOD           // .
#define DE_MINS SLASH            // -
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
#define DE_ASTR LS(DE_PLUS) // *
#define DE_QUOT LS(DE_HASH) // '
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(DE_COMM) // ;
#define DE_COLN LS(DE_DOT)  // :
#define DE_UNDS LS(DE_MINS) // _
#define DE_LBRC LA(NUMBER_5)    // [
#define DE_RBRC LA(NUMBER_6)    // ]
#define DE_PIPE LA(NUMBER_7)    // |
#define DE_LCBR LA(NUMBER_8)    // {
#define DE_RCBR LA(NUMBER_9)    // }
#define DE_AT LA(DE_L)    // @
#define DE_EURO LA(DE_E)    // €
#define DE_TILD LA(DE_N)    // ~
#define DE_BSLS LS(LA(NUMBER_7))    // (backslash)
                                     
#define HOLD_TAP_TIME 200
#define _____ &none
#define HYPER LC(LG(LS(LALT)))

&mt {
  tapping-term-ms = <HOLD_TAP_TIME>;
  flavor = "tap-preferred";
  quick_tap_ms = <50>;
};

&sk {
  quick-release;
};

#define ALP 0
#define NUM 1
#define SYM 2
#define FUN 3

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM SYM>;
            then-layer = <FUN>;
        };
    };
};

#define _mp &mt LALT
#define _mr &mt LSHFT
#define _mm &mt LCTRL
#define _mi &mt LGUI
#define _me &mt HYPER

/ {

  keymap {
    compatible = "zmk,keymap";

    alpha_1 {
      bindings = <
        &kp DE_Z  &kp DE_L  &kp DE_U  &kp DE_A  &kp DE_J  &kp DE_W  &kp DE_B      &kp DE_D    &kp DE_G    &kp DE_Y
        _mp DE_C  _mr DE_R  _mm DE_I  _mi DE_E  _me DE_O  _me DE_M  _mi DE_N      _mm DE_T    _mr DE_S    _mp DE_H
        &kp DE_V  &kp DE_X  &sl NUM   &sl SYM   &kp DE_Q  &kp DE_P  &kp DE_F      &kp DE_COMM &kp DE_DOT  &kp DE_K  
        &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &kp SPACE &sk LSHFT &kp BACKSPACE &kp ENTER   &kp TAB     &kp ESCAPE
      >;
    };

    num {
      bindings = <
        &kp F7  &kp F8  &kp F9        &kp F11       &kp F12   &kp KP_EQUAL  &kp N7          &kp N8        &kp N9  &kp DE_DOT 
        _mp F4  _mr F5  _mm F6        _mi F10       _____     &kp ENTER     _mi N4          _mm N5        _mr N6  _mp N0 
        &kp F1  &kp F2  &kp F3        &sl SYM       &to NUM   &kp BACKSPACE &kp N1          &kp N2        &kp N3  &kp DE_COMM   
        _____   _____   &kp KP_MINUS  &kp KP_PLUS   &kp SPACE &to ALP       &kp KP_MULTIPLY &kp KP_DIVIDE _____   _____
      >;
    };

    sym {
      bindings = <
        &kp DE_EURO &kp DE_TILD &kp DE_PIPE &kp DE_HASH &kp DE_ACUT &kp DE_CIRC &kp DE_RPRN &kp DE_RCBR &kp DE_RBRC &kp DE_RABK  
        _mp DE_EXLM _mr DE_QUES _mm DE_COLN _mi DE_SCLN &kp DE_GRV  &kp DE_DEG  _mi DE_LPRN _mm DE_LCBR _mr DE_LBRC _mp DE_LABK 
        &kp DE_DQUO &kp DE_QUOT &kp DE_DLR  &kp DE_BSLS &kp DE_SLSH &kp DE_EQL  &kp DE_ADIA &kp DE_ODIA &kp DE_UDIA &kp DE_SS    
        _____       _____       &kp DE_PERC &kp DE_UNDS &kp DE_PLUS &kp DE_MINS &kp DE_ASTR &kp DE_AMPR _____       _____
      >;
    };

    fun {
      bindings = <
      _____         _____         _____         _____         _____         &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_PREV    _____   &out OUT_BLE
      &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5  &kp C_MUTE        &kp C_VOL_UP  &kp C_VOL_DN  _____   _____
      _____         _____         _____         _____         _____         _____             &kp C_BRI_UP  &kp C_BRI_DEC _____   &out OUT_USB
      &bt BT_CLR    &bt BT_PRV    &bt BT_NXT    _____         _____         _____             _____         _____         &reset  &bootloader
      >;        

    };
  };
};