/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

/*
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ^ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ ß │ ´ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ Q │ W │ E │ R │ T │ Z │ U │ I │ O │ P │ Ü │ + │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ A │ S │ D │ F │ G │ H │ J │ K │ L │ Ö │ Ä │ # │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ < │ Y │ X │ C │ V │ B │ N │ M │ , │ . │ - │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_CIRC GRAVE // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL // ´ (dead)

// Row 2
#define DE_Q    Q            // Q
#define DE_W    W            // W
#define DE_E    E            // E
#define DE_R    R            // R
#define DE_T    T            // T
#define DE_Z    Y            // Z
#define DE_U    U            // U
#define DE_I    I            // I
#define DE_O    O            // O
#define DE_P    P            // P
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +

// Row 3
#define DE_A    A            // A
#define DE_S    S            // S
#define DE_D    D            // D
#define DE_F    F            // F
#define DE_G    G            // G
#define DE_H    H            // H
#define DE_J    J            // J
#define DE_K    K            // K
#define DE_L    L            // L
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #

// Row 4
#define DE_LABK NON_US_BACKSLASH // <
#define DE_Y    Z                // Y
#define DE_X    X                // X
#define DE_C    C                // C
#define DE_V    V                // V
#define DE_B    B                // B
#define DE_N    N                // N
#define DE_M    M                // M
#define DE_COMM COMMA            // ,
#define DE_DOT  PERIOD           // .
#define DE_MINS SLASH            // -

/* Shifted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ° │ ! │ " │ § │ $ │ % │ & │ / │ ( │ ) │ = │ ? │ ` │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │   │   │   │   │   │   │   │   │   │   │   │ * │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │   │   │   │   │   │   │   │   │   │   │ ' │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ > │   │   │   │   │   │   │   │ ; │ : │ _ │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
// Row 2
#define DE_ASTR LS(DE_PLUS) // *
// Row 3
#define DE_QUOT LS(DE_HASH) // '
// Row 4
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(DE_COMM) // ;
#define DE_COLN LS(DE_DOT)  // :
#define DE_UNDS LS(DE_MINS) // _

/* Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ „ │ ¡ │ “ │ ¶ │ ¢ │ [ │ ] │ | │ { │ } │ ≠ │ ¿ │   │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ « │ ∑ │ € │ ® │ † │ Ω │ ¨ │ ⁄ │ Ø │ π │ • │ ± │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ Å │ ‚ │ ∂ │ ƒ │ © │ ª │ º │ ∆ │ @ │ Œ │ Æ │ ‘ │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≤ │ ¥ │ ≈ │ Ç │ √ │ ∫ │ ~ │ µ │ ∞ │ … │ – │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_LBRC LA(NUMBER_5)    // [
#define DE_RBRC LA(NUMBER_6)    // ]
#define DE_PIPE LA(NUMBER_7)    // |
#define DE_LCBR LA(NUMBER_8)    // {
#define DE_RCBR LA(NUMBER_9)    // }
#define DE_AT LA(DE_L)    // @
#define DE_EURO LA(DE_E)    // €
#define DE_TILD LA(DE_N)    // ~

/* Shift+Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │   │ ¬ │ ” │   │ £ │ ﬁ │   │ \ │ ˜ │ · │ ¯ │ ˙ │ ˚ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ » │   │ ‰ │ ¸ │ ˝ │ ˇ │ Á │ Û │   │ ∏ │   │  │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │ Í │ ™ │ Ï │ Ì │ Ó │ ı │   │ ﬂ │   │   │   │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≥ │ ‡ │ Ù │   │ ◊ │ ‹ │ › │ ˘ │ ˛ │ ÷ │ — │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_BSLS LS(LA(NUMBER_7))    // (backslash)

#define DEFAULT 0
#define ALPHA_2 1
#define SYM_ONE 2
#define SYM_TWO 3
#define NUM_ONE 4
#define FUN_ONE 5

#define HOLD_TAP_TIME 50

/ {
    behaviors {

        mtl: mtl {
            compatible = "zmk,behavior-hold-tap";
            label = "Mod Tap Left";
            #binding-cells = <2>;
            tapping-term-ms = <HOLD_TAP_TIME>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 33 34 35 36 37 38 39 46 47 48 49>;
        };

        mtr: mtr {
            compatible = "zmk,behavior-hold-tap";
            label = "Mod Tap Left";
            #binding-cells = <2>;
            tapping-term-ms = <HOLD_TAP_TIME>;
            quick_tap_ms = <0>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 30 31 32 40 41 42 43 44 45>;
        };


        ll: ll {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Sticky Layer";
            #binding-cells = <2>;
            tapping-term-ms = <HOLD_TAP_TIME>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&sl>;
        };
    };
};

#define _____ &none

#define HYPER LC(LG(LS(LALT)))

#define BASE_LAYER(K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8,  K9,  K10, K11, K12, K13, K14, K15, K16, K17, K18, K19, K20, K21, K22, K23, K24)\
            _____ _____ K1  K2    K3          _____                                     _____ K4          K5      K6  _____ _____ \
            _____ K7    K8  K9    K10         _____                                     _____ K11         K12     K13 K14   _____ \
            _____ K15   K16 K17   K18         _____ _____       _____ _____ _____       _____ K19         K20     K21 K22   _____ \
                            _____ &to NUM_ONE K1  &ll SYM_ONE SYM_ONE _____ _____ &ll SYM_TWO SYM_TWO K2   &ll FUN_ONE FUN_ONE _____

#define ALPHA( K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8,  K9,  K10, K11, K12, K13, K14, K15, K16 ) \
                           K9       K10    K11        K12           K13     K14                  \
                  K1       K2       K3     K4         K5            K6      K7        K8         \
                  &kp LEFT &kp DOWN &kp UP &kp  RIGHT &kp BACKSPACE &kp TAB &kp ENTER &kp ESCAPE \
                                           K15        K16

#define L16_ALPHA( K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8, K9,  K10, K11, K12, K13, K14, K15, K16 ) \
            ALPHA (\
                           &kp K9,      &kp K10,     &kp K11,      &kp K12,      &kp K13, &kp K14, \
            &mtl LALT K1, &mtl LCTRL K2, &mtl LSHFT K3, &mtl LGUI K4, &mtr LGUI K5, &mtr LSHFT K6, &mtr LCTRL K7, &mtr LALT K8, \
                                                            K15,          K16\
            )


#define TAPS( K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8,  K9,  K10, K11, K12, K13, K14, K15, K16, K17, K18, K19, K20, K21, K22, K23, K24) \
            BASE_LAYER (\
                            K1,       K2,      K3,       K4,       K5,  K6, \
            &mtl LALT K7, &mtl LCTRL K8, &mtl LSHFT K9, &mtl LGUI K10, &mtr LGUI K11, &mtr LSHFT K12, &mtr LCTRL K13, &mtr LALT K14, \
              K15,  K16,    K17,  K18,    K19,          K20,  K21,        K22,  \
                                                            K23,          K24\
            )

#define L16_TAPS( K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8, K9,  K10, K11, K12, K13, K14, K15, K16 ) \
            BASE_LAYER (\
                        &kp    K9,    &kp  K10,    &kp  K11,    &kp  K12,     &kp  K13,&kp K14, \
            &mtl LALT K1, &mtl LCTRL K2, &mtl LSHFT K3, &mtl LGUI K4, &mtr LGUI K5, &mtr LSHFT K6, &mtr LCTRL K7, &mtr LALT K8, \
             _____, _____,   _____, _____,   _____,         _____, _____,       _____,  \
                                                            K15,          K16\
            )


/ {

    keymap {
        compatible = "zmk,keymap";

        test {
            bindings = <
            _____ &kp A &kp B &kp C &kp D _____                            _____  &kp E  &kp F &kp G &kp H _____ \
            _____ &kp I &kp J &kp K &kp L _____                            _____  &kp M  &kp N &kp O &kp P _____ \
            _____ &kp Q &kp R &kp S &kp T _____ _____   _____ _____ _____  _____  &kp U  &kp V &kp W &kp X _____ \
                              _____ &kp Y &kp Z  &kp N1 _____ _____ &kp N2 &kp N3 &kp N4 _____
            >;
        };
/*
        alpha_one {
            bindings = <
                L16_ALPHA(
                           DE_L, DE_U,      DE_A,             DE_B, DE_D, DE_G,
                     DE_C, DE_R, DE_I,      DE_E,             DE_N, DE_T, DE_S,  DE_H,
                                       &mt HYPER SPACE, &ll ALPHA_2 ALPHA_2
                )
            >;
        };


        alpha_two {
            bindings = <
                L16_ALPHA(
                           DE_DOT, DE_COMM,  DE_J,   DE_W, DE_Y, DE_Q,
                     DE_V,   DE_X,    DE_Z,  DE_O,   DE_M, DE_P, DE_F,  DE_K,
                                            &to DEFAULT, &to ALPHA_2
                )
            >;
        };

       sym_one {
            bindings = <
                L16_ALPHA(
                    DE_LABK, DE_LBRC, DE_LCBR,      DE_LPRN,     DE_RPRN, DE_RCBR, DE_RBRC, DE_RABK, 
                              DE_SCLN, DE_DQUO,     DE_QUOT,     DE_EXLM, DE_QUES, DE_COLN,     
                                                 &kp DE_DLR, &kp DE_MINS
                )
            >;
        };

       sym_two {
            bindings = <
                L16_ALPHA(
                    DE_EURO, DE_BSLS, DE_SLSH,     DE_ASTR,     DE_PERC, DE_AMPR, DE_EQL,  DE_GRV, 
                             DE_TILD, DE_PIPE,     DE_HASH,     DE_ACUT, DE_DEG,  DE_CIRC,
                                               &kp DE_UNDS, &kp DE_PLUS           
                )
            >;
        };

       num_one {
            bindings = <
                TAPS(
                                     &kp C_AL_CALC,   &kp ENTER,    &kp DE_EQL, &kp N7, &kp N8, &kp N9,
                            DE_SLSH,       DE_ASTR,     DE_MINS,       DE_PLUS,     N4,     N5,     N6,    N0,
                        _____      ,    &kp DE_DOT,  &kp DE_DOT, &kp BACKSPACE, &kp N1, &kp N2, &kp N3, _____,
                                                                   &to DEFAULT, _____
                )
            >;
        };

        fun_one {
            bindings = <
                TAPS (
                                      &ext_power EP_TOG,   &kp C_MUTE, &kp C_PLAY_PAUSE,  &kp F7, &kp F8, &kp F9,
                              C_PREV,            C_NEXT,     C_VOL_DN,         C_VOL_UP,      F4,     F5,     F6,     F10,
                        &bt BT_SEL 0,        &bt BT_CLR, &kp C_BRI_UP,    &kp C_BRI_DEC,  &kp F1, &kp F2, &kp F3, &kp F11,
                                                                            &to DEFAULT, &kp F12
                )
            >;
        };
*/
    };
};