/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>

/*
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ^ │ 1 │ 2 │ 3 │ 4 │ 5 │ 6 │ 7 │ 8 │ 9 │ 0 │ ß │ ´ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ Q │ W │ E │ R │ T │ Z │ U │ I │ O │ P │ Ü │ + │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ A │ S │ D │ F │ G │ H │ J │ K │ L │ Ö │ Ä │ # │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ < │ Y │ X │ C │ V │ B │ N │ M │ , │ . │ - │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_CIRC GRAVE // ^ (dead)
#define DE_SS   MINUS // ß
#define DE_ACUT EQUAL // ´ (dead)

// Row 2
#define DE_Q    Q            // Q
#define DE_W    W            // W
#define DE_E    E            // E
#define DE_R    R            // R
#define DE_T    T            // T
#define DE_Z    Y            // Z
#define DE_U    U            // U
#define DE_I    I            // I
#define DE_O    O            // O
#define DE_P    P            // P
#define DE_UDIA LEFT_BRACKET // Ü
#define DE_PLUS RIGHT_BRACKET // +

// Row 3
#define DE_A    A            // A
#define DE_S    S            // S
#define DE_D    D            // D
#define DE_F    F            // F
#define DE_G    G            // G
#define DE_H    H            // H
#define DE_J    J            // J
#define DE_K    K            // K
#define DE_L    L            // L
#define DE_ODIA SEMICOLON    // Ö
#define DE_ADIA SINGLE_QUOTE // Ä
#define DE_HASH NON_US_HASH  // #

// Row 4
#define DE_LABK NON_US_BACKSLASH // <
#define DE_Y    Z                // Y
#define DE_X    X                // X
#define DE_C    C                // C
#define DE_V    V                // V
#define DE_B    B                // B
#define DE_N    N                // N
#define DE_M    M                // M
#define DE_COMM COMMA            // ,
#define DE_DOT  PERIOD           // .
#define DE_MINS SLASH            // -

/* Shifted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ ° │ ! │ " │ § │ $ │ % │ & │ / │ ( │ ) │ = │ ? │ ` │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │   │   │   │   │   │   │   │   │   │   │   │ * │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │   │   │   │   │   │   │   │   │   │   │ ' │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ > │   │   │   │   │   │   │   │ ; │ : │ _ │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_DEG  LS(DE_CIRC) // °
#define DE_EXLM LS(NUMBER_1)    // !
#define DE_DQUO LS(NUMBER_2)    // "
#define DE_SECT LS(NUMBER_3)    // §
#define DE_DLR  LS(NUMBER_4)    // $
#define DE_PERC LS(NUMBER_5)    // %
#define DE_AMPR LS(NUMBER_6)    // &
#define DE_SLSH LS(NUMBER_7)    // /
#define DE_LPRN LS(NUMBER_8)    // (
#define DE_RPRN LS(NUMBER_9)    // )
#define DE_EQL  LS(NUMBER_0)    // =
#define DE_QUES LS(DE_SS)   // ?
#define DE_GRV  LS(DE_ACUT) // ` (dead)
// Row 2
#define DE_ASTR LS(DE_PLUS) // *
// Row 3
#define DE_QUOT LS(DE_HASH) // '
// Row 4
#define DE_RABK LS(DE_LABK) // >
#define DE_SCLN LS(DE_COMM) // ;
#define DE_COLN LS(DE_DOT)  // :
#define DE_UNDS LS(DE_MINS) // _

/* Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │ „ │ ¡ │ “ │ ¶ │ ¢ │ [ │ ] │ | │ { │ } │ ≠ │ ¿ │   │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ « │ ∑ │ € │ ® │ † │ Ω │ ¨ │ ⁄ │ Ø │ π │ • │ ± │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │ Å │ ‚ │ ∂ │ ƒ │ © │ ª │ º │ ∆ │ @ │ Œ │ Æ │ ‘ │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≤ │ ¥ │ ≈ │ Ç │ √ │ ∫ │ ~ │ µ │ ∞ │ … │ – │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_LBRC LA(NUMBER_5)    // [
#define DE_RBRC LA(NUMBER_6)    // ]
#define DE_PIPE LA(NUMBER_7)    // |
#define DE_LCBR LA(NUMBER_8)    // {
#define DE_RCBR LA(NUMBER_9)    // }
#define DE_AT LA(DE_L)    // @
#define DE_EURO LA(DE_E)    // €
#define DE_TILD LA(DE_N)    // ~

/* Shift+Alted symbols
 * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬─────┐
 * │   │ ¬ │ ” │   │ £ │ ﬁ │   │ \ │ ˜ │ · │ ¯ │ ˙ │ ˚ │     │
 * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬───┤
 * │     │ » │   │ ‰ │ ¸ │ ˝ │ ˇ │ Á │ Û │   │ ∏ │   │  │   │
 * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┐  │
 * │      │   │ Í │ ™ │ Ï │ Ì │ Ó │ ı │   │ ﬂ │   │   │   │  │
 * ├────┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴───┴──┤
 * │    │ ≥ │ ‡ │ Ù │   │ ◊ │ ‹ │ › │ ˘ │ ˛ │ ÷ │ — │        │
 * ├────┴┬──┴─┬─┴───┼───┴───┴───┴───┴───┴───┼───┴─┬─┴──┬─────┤
 * │     │    │     │                       │     │    │     │
 * └─────┴────┴─────┴───────────────────────┴─────┴────┴─────┘
 */
// Row 1
#define DE_BSLS LS(LA(NUMBER_7))    // (backslash)

#define DEFAULT 0
#define ALPHA_2 1
#define SYM_ONE 2
#define SYM_TWO 3
#define NUM_ONE 4
#define NAV_ONE 5
#define FUN_ONE 6
#define FUN_TWO 7
#define LEVEL_SELECT 8
#define MOUSE 9
#define UML 10

&mmv {   
    time-to-max-speed-ms = <500>;
    acceleration-exponent=<2>;
};

&mwh {
    acceleration-exponent=<2>;
    time-to-max-speed-ms = <500>;
};


&mt {
    tapping-term-ms = <300>;
    flavor = "tap-preferred";
    quick_tap_ms = <50>;
    bindings = <&sk>, <&kp>;
};

&sk {
    quick-release;
};

/ {
    behaviors {
        hl: hl {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold Sticky Layer";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&sl>, <&kp>;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <SYM_ONE SYM_TWO>;
            then-layer = <LEVEL_SELECT>;
        };
    };
};

#define _____ &none


#define HYPER LC(LG(LS(LALT)))
#define MEH LC(LS(LALT))

#define L16( K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8,  K9,  K10, K11, K12, K13, K14, K15, K16 ) \
            _____ _____ _____ _____ _____ _____                         _____ _____ _____ _____ _____ _____ \
            _____ K1    K2    K3    K4    _____                         _____ K5    K6    K7    K8    _____ \
            _____ _____ K9    K10   K11   _____ _____ _____ _____ _____ _____ K12   K13   K14   _____   _____ \
                              _____ _____ K15   _____ _____ _____ _____ K16   _____ _____


#define L16_TAPS( K1,  K2,  K3,  K4,  K5,  K6,  K7,  K8, K9,  K10, K11, K12, K13, K14, K15, K16 ) \
            L16 (\
            &mt HYPER K1, &hl SYM_ONE K2,     &mt LALT K3,     &mt LGUI K4,    &mt LSHFT K5,    &mt LCTRL K6, &hl SYM_TWO K7, &mt HYPER K8, \
                             &hl UML K10, &hl NUM_ONE K11, &hl NAV_ONE K12, &hl NAV_ONE K13, &hl NUM_ONE K14,    &hl UML K15, \
                                                                       K17,             K18\
            )

/ {
    keymap {
        compatible = "zmk,keymap";

        alpha_one {
            bindings = <
                L16_TAPS(
                     DE_C, DE_R, DE_I,      DE_E,        DE_N, DE_T, DE_S,  DE_H,
                           DE_L, DE_U,      DE_A,        DE_B, DE_D, DE_G,
                                       &kp SPACE, &sl ALPHA_2
                )
            >;
        };


        alpha_two {
            bindings = <
                L16_TAPS(
                     DE_V,   DE_X,    DE_Z,      DE_O,      DE_M, DE_P, DE_F,  DE_K,
                           DE_DOT, DE_COMM,      DE_J,      DE_W, DE_Y, DE_Q,
                                        &kp BACKSPACE, &sk LSHFT
                )
            >;
        };

       sym_one {
            bindings = <
                L16_TAPS(
                    DE_LABK, DE_LBRC, DE_LCBR,  DE_LPRN, DE_RPRN, DE_RCBR, DE_RBRC, DE_RABK, 
                              DE_SCLN, DE_DQUO, DE_QUOT, DE_EXLM, DE_QUES, DE_COLN,     
                                                 DE_DLR, DE_MINS
                )
            >;
        };

       sym_two {
            bindings = <
                L16_TAPS(
                    DE_EURO, DE_BSLS, DE_SLSH, DE_ASTR, DE_PERC, DE_AMPR, DE_EQL,  DE_GRV, 
                             DE_TILD, DE_PIPE, DE_HASH, DE_ACUT, DE_DEG,  DE_CIRC,
                                               DE_UNDS, DE_PLUS           
                )
            >;
        };

       num_one {
            bindings = <
                L16_TAPS(
                       N1,    N2,     N3,          N4,            N7,      N8,      N9,    N0,
                       SPACE, DE_DOT,          N5,            N6, DE_COMM, DE_SLSH, 
                                          &to DEFAULT, &kp BACKSPACE
                )
            >;
        };

        nav_one {
            bindings = <
                L16(
                    &kp LEFT,  &kp DOWN,    &kp UP,   &kp RIGHT, &kp LSHFT, &kp LCTRL, &kp ENTER, &kp ESCAPE,
                              &kp PG_DN, &kp PG_UP,    &kp HOME,  &kp LGUI,  &kp LALT,   &kp END,
                                                    &to DEFAULT,   &kp TAB
                )
            >;
        };

        fun_one {
            bindings = <
                L16 (
                    &kp C_PREV, &kp C_NEXT, &kp C_VOL_DN,     &kp C_VOL_UP, &bt BT_CLR, &bt BT_SEL 0, &bt BT_SEL 1, _____,
                               _____,   &kp C_MUTE, &kp C_PLAY_PAUSE,      _____,        _____,        _____,  
                                                               &to DEFAULT, _____
                )
            >;
        };

        fun_two {
            bindings = <
                L16(
                  &kp F1, &kp F2,  &kp F3,      &kp F4, &mt LSHFT F7, &mt LCTRL F8, &kp F9,  &kp F10,
                     _____, &kp F11,      &kp F5,       &kp F6,      &kp F12,  _____,    
                                           &to DEFAULT,  _____
                )
            >;
        };

        level_select {
            bindings = <
                L16 (
                _____, _____, &to FUN_TWO, &to FUN_ONE, &to NAV_ONE, &to MOUSE, _____, _____,
                       _____,       _____,       _____,       _____,     _____, _____,
                                           &to DEFAULT,       _____
                )
            >;
        };

        mouse {
            bindings = <
                L16 (
                      &mmv MOVE_LEFT, &mmv MOVE_DOWN, &mmv MOVE_UP, &mmv MOVE_RIGHT, &mwh SCROLL_LEFT, &mwh SCROLL_DOWN, &mwh SCROLL_UP, &mwh SCROLL_RIGHT, 
                                           &mkp LCLK,    &mkp RCLK,       &mkp MCLK,            _____,            _____,          _____,
                                                                        &to DEFAULT,            _____
                )
            >;
        };

        umlauts {
            bindings = <
                L16 (
                _____, _____,       _____,       _____,       _____,     _____, _____, _____,
                       _____, &kp DE_ADIA, &kp DE_ODIA, &kp DE_UDIA, &kp DE_SS, _____, 
                                                 _____,       _____
                )
            >;
        };

    };
};